name: CI Pipeline
on:
  push:
    branches:
      - main
      - stag
  pull_request:
    branches:
      - main
      - stag
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run workflow on'
        required: true
        default: 'stag'
        type: choice
        options:
          - main
          - stag
  workflow_call:
    inputs:
      branch:
        description: 'Branch to run workflow on'
        type: string
        required: false
        default: ''
    secrets:
      SONAR_TOKEN:
        required: true
      SONAR_HOST_URL:
        required: true
      HARBOR_USERNAME:
        required: true
      HARBOR_PASSWORD:
        required: true
      HARBOR_REGISTRY:
        required: true
      SNYK_TOKEN:
        required: true
jobs:
  determine-project-type:
    runs-on: ubuntu-latest
    outputs:
      project_type: ${{ steps.set-type.outputs.project_type }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Determine project type
        id: set-type
        run: |
          if [ -f "package.json" ]; then
            echo "project_type=node" >> $GITHUB_OUTPUT
          elif [ -f "requirements.txt" ]; then
            echo "project_type=python" >> $GITHUB_OUTPUT
          elif [ -f "composer.json" ]; then
            echo "project_type=php" >> $GITHUB_OUTPUT
          elif [ -f "pom.xml" ] || [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            echo "project_type=java" >> $GITHUB_OUTPUT
          else
            echo "project_type=unknown" >> $GITHUB_OUTPUT
          fi
  
  security_scan:
    needs: determine-project-type
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch || github.ref_name }}
          fetch-depth: 0
          submodules: recursive

      # Node.js setup for Node projects
      - name: Setup Node.js
        if: needs.determine-project-type.outputs.project_type == 'node'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Python setup for Python projects
      - name: Setup Python
        if: needs.determine-project-type.outputs.project_type == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # PHP setup for PHP projects
      - name: Setup PHP
        if: needs.determine-project-type.outputs.project_type == 'php'
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

        # Java setup for Java projects
      - name: Setup Java
        if: needs.determine-project-type.outputs.project_type == 'java'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Java environment
        if: needs.determine-project-type.outputs.project_type == 'java'
        run: |
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          echo "Current JAVA_HOME: $JAVA_HOME"
          echo "Java version:"
          java -version
          echo "Maven version:"
          mvn -version || true

      - name: Set Maven Wrapper Permissions
        if: needs.determine-project-type.outputs.project_type == 'java'
        run: |
          if [ -f "mvnw" ]; then
            chmod +x mvnw
            echo "Maven wrapper permissions updated"
          fi
          if [ -f "./mvnw" ]; then
            chmod +x ./mvnw
            echo "Maven wrapper permissions updated (relative path)"
          fi

      # Install dependencies based on project type
      - name: Install dependencies (Node.js)
        if: needs.determine-project-type.outputs.project_type == 'node'
        run: |
          if [ -f "package.json" ]; then
            npm install
          fi

      - name: Install dependencies (Python)
        if: needs.determine-project-type.outputs.project_type == 'python'
        run: |
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi

      - name: Install dependencies (PHP)
        if: needs.determine-project-type.outputs.project_type == 'php'
        run: |
          if [ -f "composer.json" ]; then
            composer install
          fi

      # Maven dependency installation
      - name: Install dependencies (Maven)
        if: >
          needs.determine-project-type.outputs.project_type == 'java'
        run: |
          echo "Using JAVA_HOME: $JAVA_HOME"
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          
          # Try using mvnw if it exists, otherwise use mvn
          if [ -f "./mvnw" ]; then
            echo "Using Maven Wrapper"
            ./mvnw dependency:resolve -X
          else
            echo "Using Global Maven"
            mvn dependency:resolve -X
          fi

      # Run Snyk scan based on project type
      - name: Run Snyk to check for vulnerabilities (Node.js)
        if: needs.determine-project-type.outputs.project_type == 'node'
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --all-projects

      - name: Run Snyk to check for vulnerabilities (Python)
        if: needs.determine-project-type.outputs.project_type == 'python'
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          DEBUG: "*snyk*"
          SNYK_DEBUG: "1"
        with:
          command: monitor
          args: --all-projects --debug

      - name: Run Snyk to check for vulnerabilities (PHP)
        if: needs.determine-project-type.outputs.project_type == 'php'
        uses: snyk/actions/php@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --all-projects

      # Snyk scan for Java projects
      - name: Run Snyk to check for vulnerabilities (Java)
        if: needs.determine-project-type.outputs.project_type == 'java'
        uses: snyk/actions/maven@master
        env:
          JAVA_HOME: ${{ env.JAVA_HOME }}
          PATH: ${{ env.JAVA_HOME }}/bin:${{ env.PATH }}
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          DEBUG: "*snyk*"
          SNYK_DEBUG: "1"
          MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true"
        with:
          command: monitor
          args: >
            --all-projects
            --severity-threshold=high
            --debug
            --maven-aggregate-project

      - name: Print Debug Information
        if: always() && needs.determine-project-type.outputs.project_type == 'java'
        run: |
          echo "=== Environment Information ==="
          echo "JAVA_HOME: $JAVA_HOME"
          echo "PATH: $PATH"
          echo "Working Directory:"
          pwd
          echo "Directory Contents:"
          ls -la
          echo "Java Version:"
          java -version || true
          echo "Maven Version:"
          mvn -version || true
          echo "=== Snyk Logs ==="
          cat ~/.snyk/logs/* || true

  sonar_scan:
    needs: security_scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch || github.event.inputs.branch || github.ref_name }}
          fetch-depth: 0
          submodules: recursive
      
      - name: Set up SonarQube Scanner
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=${{ github.event.repository.name }}.${{ github.ref_name }}
            -Dsonar.sources=.
            -Dsonar.exclusions=**/*.java,**/node_modules/**,**/*.json
            -Dsonar.language=js,ts
            -Dsonar.sourceEncoding=UTF-8
  
  build_and_push:
    needs: sonar_scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch || github.event.inputs.branch || github.ref_name }}
          fetch-depth: 0
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Set up Docker
        uses: docker/setup-qemu-action@v2
      
      - name: Login to Harbor
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}
          registry: ${{ secrets.HARBOR_REGISTRY }}
      
      - name: Set environment variables
        id: set-env
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF}" == "refs/heads/stag" ]]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          fi
          echo "COMMIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build and Push Docker Images
        run: |
          SERVICE_NAME="${REPO_NAME,,}"
          IMAGE_NAME="${{ secrets.HARBOR_REGISTRY }}/${ENVIRONMENT}/${SERVICE_NAME}"
          TIMESTAMP=$(date +%s)
          
          # Build Docker image
          docker build -t "$IMAGE_NAME:$COMMIT_SHA-$TIMESTAMP" -t "$IMAGE_NAME:latest" .
          
          # Push Docker image
          docker push "$IMAGE_NAME:$COMMIT_SHA-$TIMESTAMP"
          docker push "$IMAGE_NAME:latest"
